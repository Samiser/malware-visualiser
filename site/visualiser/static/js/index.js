import React from 'react';
import ReactDOM from 'react-dom';
import Tree from 'react-tree-graph';

const Log = ({ hosts }) => {
	return (
		<div id="log">
			<h2>Log</h2>
			<div id="log_text">
				<ul>
				{hosts.map((host) => (
					<li>{host.parent_ip} infected {host.ip}</li>
				))}
				</ul>
			</div>
		</div>
	)
};

class TimeAlive extends React.Component {
  constructor(props) {
    super(props);
    this.state = { time: {}, seconds: 5 };
    this.timer = 0;
    this.countDown = this.countDown.bind(this);
    this.timer = setInterval(this.countDown, 1000);
  }

  secondsToTime(secs){
    let hours = Math.floor(secs / (60 * 60));
    if (hours < 10) hours = "0" + String(hours); 

    let divisor_for_minutes = secs % (60 * 60);
    let minutes = Math.floor(divisor_for_minutes / 60);
    if (minutes < 10) minutes = "0" + String(minutes); 

    let divisor_for_seconds = divisor_for_minutes % 60;
    let seconds = Math.ceil(divisor_for_seconds);
    if (seconds < 10) seconds = "0" + String(seconds); 

    let obj = {
      "h": hours,
      "m": minutes,
      "s": seconds
    };
    return obj;
  }

  componentDidMount() {
    let timeStart = this.secondsToTime(this.state.seconds);
    this.setState({ time: timeStart });
  }

  countDown() {
    // Remove one second, set state so a re-render happens.
    let seconds = this.state.seconds + 1;
    this.setState({
      time: this.secondsToTime(seconds),
      seconds: seconds,
    });
  }

  render() {
    return(
      <React.Fragment>
        {this.state.time.h}:{this.state.time.m}:{this.state.time.s}
      </React.Fragment>
    );
  }
}


const HostInfo = ({ info }) => {
	const hello = "hello";

	return (
		<div id="host_info">
			<h2>HostInfo</h2>
			<ul>
				<li><b>IP: </b>{info.selectedHost}</li>
				<li><b>Time Alive:</b> <TimeAlive /></li> 
			</ul>
		</div>
	)
};

const Graph = ({ info }) => {

	// recursively nest the flat array into a tree array
	const nest = (items, id = "0", link = 'parent_ip') =>
		items
			// begin tree with root node
			.filter(item => item[link] === id)
			// for each item at this layer
			.map(item => ({
					name: item.ip,
					// recursively nest the node children
					children: nest(items, item.ip), 
					gProps: {
						onClick: (event, node) => nodeClick(node)
					}
			}));

	// on node click
	let nodeClick = function(node) {
		info.selectHost(node);
	}

	// declare nested tree array
	let data = nest(info.hosts)[0];
 
	if (data) {
		return (
			<div id="graph">
				<Tree
						data={data}
						height={800}
						width={800}/>
			</div>
		);
	} else {
		return(null);
	}
};

const Buttons = () => {
	return (
		<div id="buttons">
			<h2>Buttons</h2>
		</div>
	)
};

const Discovered = () => {
	return (
		<div id="discovered">
			<h2>Discovered</h2>
		</div>
	)
};

const Infected = ({ hosts }) => {
	return (
		<div id="infected">
			<h2>Infected</h2>
			<ul>
			{hosts.map((host) => (
				<li>{host.ip}</li>
			))}
			</ul>
		</div>
	)
};

class App extends React.Component {
	constructor(props) {
		super(props);
		this.childSelectHost = (value) => {
			console.log("New host selected: " + value);
			this.setState({ selectedHost: value });
		};
		this.state = {
			hosts: [{name: "Boop", parent_ip: null, children: []}],
			selectedHost: '10.0.0.34',
			selectHost: this.childSelectHost,
		};
	}

	getHosts() {
		fetch('http://127.0.0.1:8000/api/worms/?format=json')
		.then(res => res.json())
		.then((data) => {
			this.setState({ hosts: data })
		})
		.catch(console.log)
	}

	componentDidMount() {
		this.getHosts();
		this.interval = setInterval(() => this.getHosts(), 1000);
	}

	componentWillUnmount() {
		clearInterval(this.interval);
	}

	render() {
		return (
			<div class="container">
				<Buttons />
				<Log hosts={this.state.hosts} />
				<HostInfo info={this.state} />
				<Graph info={this.state} />
				<Discovered />
				<Infected hosts={this.state.hosts} />
			</div>
		);
	}
}

const element = <App />;
ReactDOM.render(
  element,
  document.getElementById('react')
);
